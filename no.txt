Tier 1: HIGH impact + HIGH confidence + LOW likelihood (8)
documentbuilderfactory-disallow-doctype-decl-false (Java) - XXE vulnerability in XML processing
documentbuilderfactory-disallow-doctype-decl-missing (Java) - XXE vulnerability in XML processing
documentbuilderfactory-external-general-entities-true (Java) - XXE vulnerability in XML processing
documentbuilderfactory-external-parameter-entities-true (Java) - XXE vulnerability in XML processing
saxparserfactory-disallow-doctype-decl-missing (Java) - XXE vulnerability in XML processing
transformerfactory-dtds-not-disabled (Java) - XXE vulnerability in XML processing
hashids-with-django-secret (Python) - Insecure use of HashIDs with Django secret key
hashids-with-flask-secret (Python) - Insecure use of HashIDs with Flask secret key
Tier 2: HIGH impact + HIGH confidence + MEDIUM likelihood (4)
tainted-file-path (Java) - User input controlling file paths leading to path traversal
subprocess-injection (Python) - Command injection via subprocess
insecure-binaryformatter-deserialization (C#) - Dangerous deserialization vulnerability
jwt-simple-noverify (JavaScript) - JWT token verification bypass
Tier 3: HIGH impact + HIGH confidence + HIGH likelihood (5)
tainted-system-command (Java) - Command injection vulnerability
express-libxml-noent (JavaScript) - XXE vulnerability in Express
express-session-hardcoded-secret (JavaScript) - Hardcoded credentials
express-third-party-object-deserialization (JavaScript) - Remote code execution via deserialization
express-sequelize-injection (JavaScript) - SQL injection in Express
Tier 4: HIGH impact + MEDIUM confidence + LOW likelihood (2)
java-jwt-decode-without-verify (Java) - JWT verification bypass
find-sql-string-concatenation (Java) - SQL injection via string concatenation
jackson-unsafe-deserialization (Java) - RCE via Jackson deserialization
xmlinputfactory-possible-xxe (Java) - XXE vulnerability
sqlalchemy-sql-injection (Python) - SQL injection in SQLAlchemy
csharp-sqli (C#) - SQL injection vulnerability
Tier 5: HIGH impact + MEDIUM confidence + MEDIUM likelihood (16)
tainted-sql-string (Java) - SQL injection vulnerability
tainted-sqli (Java) - SQL injection in AWS Lambda
spring-actuator-fully-enabled-yaml (Java) - Exposed sensitive endpoints
empty-aes-key (Python) - Weak encryption with empty AES key
user-eval-format-string (Python) - Remote code execution via eval
user-eval (Python) - Remote code execution via eval
user-exec-format-string (Python) - Remote code execution via exec
user-exec (Python) - Remote code execution via exec
command-injection-os-system (Python) - Command injection via os.system
sql-injection-using-extra-where (Python) - SQL injection in Django
sql-injection-using-rawsql (Python) - SQL injection in Django
sql-injection-db-cursor-execute (Python) - SQL injection in Django
ssrf-injection-requests (Python) - Server-side request forgery
os-system-injection (Python) - Command injection vulnerability
path-traversal-open (Python) - Path traversal vulnerability
dangerous-subprocess-use (Python) - Command injection via subprocess
xxe-saxreader (Java) - XML External Entity vulnerability in SAXReader
xxe-xmlreader (Java) - XML External Entity vulnerability in XMLReader
xxe-documentbuilderfactory (Java) - XML External Entity vulnerability in DocumentBuilderFactory
xxe-saxbuilder (Java) - XML External Entity vulnerability in SAXBuilder
xxe-saxparser (Java) - XML External Entity vulnerability in SAXParser

Additional HIGH impact rules (by language)

Python:
django-sql-injection (Python) - SQL injection in Django
insecure-deserialization-pickle (Python) - Insecure deserialization with pickle
insecure-deserialization-yaml (Python) - Insecure deserialization with YAML
jinja2-template-injection (Python) - Server-side template injection in Jinja2
paramiko-exec-command (Python) - Command injection via Paramiko
python-shell-injection (Python) - Shell injection vulnerability
python-code-injection (Python) - Code injection vulnerability
python-path-traversal (Python) - Path traversal vulnerability

JavaScript/TypeScript:
express-path-traversal (JavaScript) - Path traversal in Express
jwt-exposed-credentials (JavaScript) - Exposed credentials in JWT
nodejs-command-injection (JavaScript) - Command injection in Node.js

C#:
csharp-command-injection (C#) - Command injection in C#
csharp-xxe (C#) - XML External Entity vulnerability in C#
csharp-insecure-deserialization (C#) - Insecure deserialization in C#

Credential-Related Rules:

Hardcoded Credentials:
java-jwt-hardcoded-secret - Hardcoded JWT secrets in Java
jwt-python-hardcoded-secret - Hardcoded JWT secrets in Python
hardcoded-jwt-secret (jose) - Hardcoded JWT secrets in JavaScript's jose library
hardcoded-jwt-secret (jsonwebtoken) - Hardcoded JWT secrets in jsonwebtoken library
express-session-hardcoded-secret - Hardcoded Express session secrets
express-jwt-hardcoded-secret - Hardcoded Express JWT secrets
hardcoded-passport-secret - Hardcoded Passport JWT secrets
hardcoded-hmac-key - Hardcoded HMAC keys in JavaScript
hardcoded-token - Hardcoded tokens in boto3 (AWS)
avoid_hardcoded_config_SECRET_KEY - Hardcoded Flask secret keys
hardcoded-password-default-argument - Hardcoded passwords in default arguments

Exposed Credentials:
jwt-python-exposed-credentials - Credentials exposed in JWT payloads
jwt-exposed-data - Sensitive data exposure in JWT payloads
jose-exposed-data - Sensitive data exposure in jose JWT payloads

Insecure Authentication:
anonymous-ldap-bind - Anonymous LDAP authentication
ldap-injection - LDAP injection vulnerabilities

JWT-Specific Vulnerabilities:
jwt-none-alg (Java) - Use of 'none' algorithm in JWT tokens
jwt-none-alg (JavaScript) - Use of 'none' algorithm in JWT tokens
jwt-python-none-alg - Use of 'none' algorithm in JWT tokens in Python
java-jwt-decode-without-verify - JWT decoding without verification in Java
jwt-decode-without-verify - JWT decoding without verification in JavaScript

Other Security Issues:
empty-aes-key - Empty AES encryption keys
object-deserialization - Insecure object deserialization in Java
hashids-with-django-secret - Insecure use of HashIDs with Django secret
hashids-with-flask-secret - Insecure use of HashIDs with Flask secret
X509Certificate2-privkey - Issues with X509 certificate private keys



T0:

express-session-hardcoded-secret
express-jwt-hardcoded-secret
hardcoded-jwt-secret (jsonwebtoken)
hardcoded-jwt-secret (jose)
java-jwt-hardcoded-secret
jwt-python-hardcoded-secret
hardcoded-passport-secret
hardcoded-hmac-key
avoid_hardcoded_config_SECRET_KEY (Python)
hardcoded-token
hardcoded-password-default-argument

tainted-exec
tainted-code-exec
eval-use
exec-use
user-eval
user-eval-format-string
user-exec
user-exec-format-string
python-code-injection
tainted-callable

dangerous-system-call
dangerous-subprocess-use
command-injection-os-system
command-injection-shell-call
command-injection-process-builder
command-injection-formatted-runtime-call
os-system-injection
dangerous-os-exec
dangerous-asyncio-exec
subprocess-injection
paramiko-exec-command
python-shell-injection
nodejs-command-injection

express-third-party-object-deserialization
insecure-binaryformatter-deserialization (C#)
object-deserialization (Java)
jackson-unsafe-deserialization (Java)
use-snakeyaml-constructor

tainted-file-path (Java)
tainted-system-command (Java)

jwt-simple-noverify (JavaScript)
jwt-none-alg (Java)
jwt-none-alg (JavaScript)
jwt-python-none-alg
jwt-decode-without-verify
java-jwt-decode-without-verify

jinja2-template-injection
el-injection
spel-injection
express-libxml-noent
